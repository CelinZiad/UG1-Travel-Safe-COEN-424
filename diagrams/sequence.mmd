sequenceDiagram
  autonumber
  participant Dev as "Developer"
  participant Ingest as "Batch Ingest (Python)"
  participant CKAN as "CKAN API"
  participant S3 as "S3 (/raw, /ref, /curated, /served)"
  participant EMR as "EMR Serverless (Spark)"
  participant DDB as "DynamoDB (optional)"
  participant GW as "API Gateway"
  participant API as "FastAPI"
  participant User as "Client (Map/UI)"
  participant Graf as "Grafana"

  Dev->>Ingest: run fetch_ckan_resource.py (resource_id â†’ bucket/prefix)
  Ingest->>CKAN: datastore_search (paginate)
  CKAN-->>Ingest: records OR 404
  Ingest->>CKAN: resource_show (fallback direct file)
  CKAN-->>Ingest: file URL (CSV/JSON/GeoJSON)
  Ingest->>S3: PutObject /raw/yyyy-mm/...
  Ingest->>S3: PutObject /ref/montreal_boroughs.geojson (WGS84)

  Dev->>EMR: submit 10_clean_normalize.py (crime, accidents)
  EMR->>S3: read /raw/*
  EMR->>S3: write /curated/{dataset}/ (Parquet + metrics)

  Dev->>EMR: submit 20_join_areas.py (--boroughs=/ref/...)
  EMR->>S3: read /curated + /ref
  EMR->>S3: write /curated/{dataset}_areas/ (joined)
  EMR-->>S3: write /served/*.json (optional exports)
  EMR-->>DDB: upsert AreaScore (optional aggregates)

  User->>GW: GET /areas
  GW->>API: forward
  API->>DDB: Query latest per area (if using DDB)
  DDB-->>API: items
  API-->>User: 200 AreaScores (JSON)

  User->>GW: GET /areas/{id}/scores?from=YYYY-MM&to=YYYY-MM
  GW->>API: forward
  API->>DDB: Query PK=AREA#{id} with SK range
  DDB-->>API: AreaScore[]
  API-->>User: 200 { areaId, items[] }

  Graf->>S3: HTTP(S) read /served/*.json (or curated via Athena)
  S3-->>Graf: series / geomap layers
